# -*- coding: utf-8 -*-
"""Python_Section_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rGEsyPvI6A3bUGSpBkDnbfJj5UQHQvqR

####Question 9: Distance Matrix Calculation
"""

import pandas as pd

def calculate_distance_matrix(data: str) -> pd.DataFrame:
    df = pd.read_csv(data)
    unique_ids = pd.unique(df[['id_start', 'id_end']].values.ravel('K'))
    distance_matrix = pd.DataFrame(index=unique_ids, columns=unique_ids).fillna(float('inf'))

    for _, row in df.iterrows():
        distance_matrix.at[row['id_start'], row['id_end']] = row['distance']
        distance_matrix.at[row['id_end'], row['id_start']] = row['distance']

    for i in unique_ids:
        distance_matrix.at[i, i] = 0

    for k in unique_ids:
        for i in unique_ids:
            for j in unique_ids:
                distance_matrix.at[i, j] = min(distance_matrix.at[i, j], distance_matrix.at[i, k] + distance_matrix.at[k, j])

    return distance_matrix

data = 'dataset-2.csv'
distance_matrix = calculate_distance_matrix(data)
print(distance_matrix)

"""####Question 10: Unroll Distance Matrix"""

def unroll_distance_matrix(distance_matrix: pd.DataFrame) -> pd.DataFrame:
    unrolled_data = []
    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:
            if id_start != id_end:
                unrolled_data.append([id_start, id_end, distance_matrix.at[id_start, id_end]])
    return pd.DataFrame(unrolled_data, columns=['id_start', 'id_end', 'distance'])

unrolled_df = unroll_distance_matrix(distance_matrix)
print(unrolled_df)

"""####Question 11: Finding IDs within Percentage Threshold

"""

def find_ids_within_ten_percentage_threshold(unrolled_df: pd.DataFrame, reference_id: int) -> list:
    reference_distances = unrolled_df[unrolled_df['id_start'] == reference_id]['distance']
    average_distance = reference_distances.mean()
    threshold = 0.1 * average_distance
    within_threshold = unrolled_df[(unrolled_df['distance'] >= average_distance - threshold) &
                                   (unrolled_df['distance'] <= average_distance + threshold)]
    return sorted(within_threshold['id_start'].unique().tolist())

reference_id = 1001400
within_threshold_ids = find_ids_within_ten_percentage_threshold(unrolled_df, reference_id)
print(within_threshold_ids)

"""####Question 12: Calculate Toll Rate"""

def calculate_toll_rate(unrolled_df: pd.DataFrame) -> pd.DataFrame:
    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}
    for vehicle, rate in rate_coefficients.items():
        unrolled_df[vehicle] = unrolled_df['distance'] * rate
    return unrolled_df

toll_rate_df = calculate_toll_rate(unrolled_df)
print(toll_rate_df)

"""####Question 13: Calculate Time-Based Toll Rates"""

import datetime

def calculate_time_based_toll_rates(toll_rate_df: pd.DataFrame) -> pd.DataFrame:
    toll_rate_df['start_day'] = 'Monday'
    toll_rate_df['start_time'] = datetime.time(0, 0, 0)
    toll_rate_df['end_day'] = 'Monday'
    toll_rate_df['end_time'] = datetime.time(23, 59, 59)

    for index, row in toll_rate_df.iterrows():
        for vehicle in ['moto', 'car', 'rv', 'bus', 'truck']:
            if row['start_day'] in ['Saturday', 'Sunday']:
                discount_factor = 0.7
            else:
                if row['start_time'] < datetime.time(10, 0, 0):
                    discount_factor = 0.8
                elif row['start_time'] < datetime.time(18, 0, 0):
                    discount_factor = 1.2
                else:
                    discount_factor = 0.8

            toll_rate_df.at[index, vehicle] *= discount_factor

    return toll_rate_df

time_based_toll_rate_df = calculate_time_based_toll_rates(toll_rate_df)
print(time_based_toll_rate_df)